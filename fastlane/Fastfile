default_platform(:android)
platform :android do
 desc "Generate build and upload to firebase"
 lane :build do
   slack_send(':crossed_fingers: Generating '+ENV['BUILD_TYPE']+' build')
   gradle(
     task: "assemble",
     build_type: ENV['BUILD_TYPE'],
     properties: {
      #  "android.injected.signing.store.file" => ENV['KEYSTORE_FILE'],
      #  "android.injected.signing.store.password" => ENV['KEYSTORE_PASS'],
      #  "android.injected.signing.key.alias" => ENV['KEY_ALIAS'],
      #  "android.injected.signing.key.password" => ENV['KEY_PASS'],
     }
   )
   slack_send(ENV['BUILD_TYPE']+' Build Successfully completed...:star-struck: \n Uploading to Firebase')
   firebase_app_distribution(
     app: ENV["FIREBASE_APP_ID"],
    #  release_notes_file: "releaseNotes.txt",
     groups: "Internal",
     firebase_cli_token: ENV['FIREBASE_CI_TOKEN'],
     debug: false
   )
   slack_send(':tada: Hooooooorrrayyyyy!!! '+ENV['BUILD_TYPE']+' Build is successfully uploaded on Firebase  Distribution!! :dancer::man_dancing:')
  end
end

def slack_send(msg)
    slack(
      message: msg,
      success: true,
      channel: '#'+ENV['CHANNEL'],
      default_payloads: []
    )
end

# # This file contains the fastlane.tools configuration
# # You can find the documentation at https://docs.fastlane.tools
# #
# # For a list of all available actions, check out
# #
# #     https://docs.fastlane.tools/actions
# #
# # For a list of all available plugins, check out
# #
# #     https://docs.fastlane.tools/plugins/available-plugins
# #

# # Uncomment the line if you want fastlane to automatically update itself
# # update_fastlane

# default_platform(:android)

# platform :android do
#   desc "Runs all the tests"
#   lane :test do
#     gradle(task: "test")
#   end

#   desc "Submit a new Beta Build to Crashlytics Beta"
#   lane :beta do
#     gradle(task: "clean assembleRelease")
#     crashlytics
  
#     # sh "your_script.sh"
#     # You can also use other beta testing services here
#   end

#   desc "Deploy a new version to the Google Play"
#   lane :deploy do
#     gradle(task: "clean assembleRelease")
#     upload_to_play_store
#   end
# end
